// –î–ï–ú–û –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–µ–º–æ-–±–∞–∑–∞! –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!

import { initializeApp } from 'firebase/app';
import { getDatabase, ref, set, onValue, off, onDisconnect, remove } from 'firebase/database';

// –î–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ dgame-5158a
const firebaseConfig = {
  apiKey: "AIzaSyBYourActualApiKeyFromFirebaseConsole", // –ü–æ–ª—É—á–∏—Ç–µ –∏–∑ Firebase Console
  authDomain: "dgame-5158a.firebaseapp.com",
  databaseURL: "https://dgame-5158a-default-rtdb.firebaseio.com/",
  projectId: "dgame-5158a",
  storageBucket: "dgame-5158a.appspot.com",
  messagingSenderId: "YourMessagingSenderId", // –ü–æ–ª—É—á–∏—Ç–µ –∏–∑ Firebase Console
  appId: "YourWebAppId" // –ü–æ–ª—É—á–∏—Ç–µ –∏–∑ Firebase Console
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
export const database = getDatabase(app);

// –¢–∏–ø—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞
export interface Player {
  id: string;
  x: number;
  y: number;
  color: string;
  name: string;
  timestamp: number;
}

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–∫–∞–º–∏
export const playerService = {
  // –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞
  addPlayer: async (player: Player) => {
    try {
      const playerRef = ref(database, `players/${player.id}`);
      await set(playerRef, player);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
      const disconnectRef = onDisconnect(playerRef);
      await disconnectRef.remove();
      
      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${player.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
  updatePlayerPosition: async (playerId: string, x: number, y: number) => {
    try {
      const playerRef = ref(database, `players/${playerId}/x`);
      await set(playerRef, x);
      const playerRefY = ref(database, `players/${playerId}/y`);
      await set(playerRefY, y);
      const timestampRef = ref(database, `players/${playerId}/timestamp`);
      await set(timestampRef, Date.now());
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –∏–≥—Ä—É
    }
  },

  // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
  subscribeToPlayers: (callback: (players: Record<string, Player>) => void) => {
    const playersRef = ref(database, 'players');
    
    onValue(playersRef, (snapshot) => {
      try {
        const data = snapshot.val();
        callback(data || {});
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', error);
        callback({});
      }
    }, (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤:', error);
      callback({});
    });

    return () => {
      off(playersRef);
      console.log('üîå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä–æ–∫–æ–≤');
    };
  },

  // –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞
  removePlayer: async (playerId: string) => {
    try {
      const playerRef = ref(database, `players/${playerId}`);
      await remove(playerRef);
      console.log(`üëã –ò–≥—Ä–æ–∫ ${playerId} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
      throw error;
    }
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
export const generateRandomColor = (): string => {
  const colors = [
    '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
    '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9',
    '#F8C471', '#82E0AA', '#F1948A', '#85C1E9', '#D7BDE2',
    '#F39C12', '#E74C3C', '#9B59B6', '#3498DB', '#1ABC9C',
    '#2ECC71', '#F1C40F', '#E67E22', '#34495E', '#95A5A6'
  ];
  return colors[Math.floor(Math.random() * colors.length)];
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase
export const testFirebaseConnection = async (): Promise<boolean> => {
  try {
    const testRef = ref(database, '.info/connected');
    return new Promise((resolve) => {
      const unsubscribe = onValue(testRef, (snapshot) => {
        const connected = snapshot.val();
        unsubscribe();
        resolve(connected === true);
      });
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    return false;
  }
}; 