import { useState, useEffect, useCallback } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { LoginForm } from './components/LoginForm';
import { GameField } from './components/GameField';
import { PlayerList } from './components/PlayerList';
import { useRealtimePlayers } from './hooks/useRealtimePlayers';
import { usePlayerMovement } from './hooks/usePlayerMovement';
import { generateRandomColor, type Player } from './services/localMultiplayer';
import './App.css';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const FIELD_WIDTH = 800;
const FIELD_HEIGHT = 600;
const PLAYER_SIZE = 16; // 16px –≤–º–µ—Å—Ç–æ 4px –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏

interface GameState {
  isLoggedIn: boolean;
  currentPlayer: Player | null;
  isLoading: boolean;
  error: string | null;
}

function App() {
  const [gameState, setGameState] = useState<GameState>({
    isLoggedIn: false,
    currentPlayer: null,
    isLoading: false,
    error: null
  });

  // –•—É–∫–∏ –¥–ª—è –∏–≥—Ä—ã
  const { 
    players, 
    isConnected, 
    addPlayer, 
    removePlayer 
  } = useRealtimePlayers();

  // –•—É–∫ –¥–≤–∏–∂–µ–Ω–∏—è (—Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É)
  const playerMovement = usePlayerMovement({
    playerId: gameState.currentPlayer?.id || '',
    fieldWidth: FIELD_WIDTH,
    fieldHeight: FIELD_HEIGHT,
    playerSize: PLAYER_SIZE
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É
  const handleLogin = useCallback(async (playerName: string) => {
    setGameState(prev => ({ ...prev, isLoading: true, error: null }));

    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      const newPlayer: Player = {
        id: uuidv4(),
        name: playerName,
        color: generateRandomColor(),
        x: FIELD_WIDTH / 2,
        y: FIELD_HEIGHT / 2,
        timestamp: Date.now()
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ Firebase
      await addPlayer(newPlayer);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ö—É–∫–µ –¥–≤–∏–∂–µ–Ω–∏—è
      playerMovement.setInitialPosition(newPlayer.x, newPlayer.y);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setGameState({
        isLoggedIn: true,
        currentPlayer: newPlayer,
        isLoading: false,
        error: null
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É:', error);
      setGameState(prev => ({
        ...prev,
        isLoading: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'
      }));
    }
  }, [addPlayer, playerMovement]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
  const handleLogout = useCallback(async () => {
    if (gameState.currentPlayer) {
      try {
        await removePlayer(gameState.currentPlayer.id);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã:', error);
      }
    }

    setGameState({
      isLoggedIn: false,
      currentPlayer: null,
      isLoading: false,
      error: null
    });
  }, [gameState.currentPlayer, removePlayer]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const handleBeforeUnload = () => {
      if (gameState.currentPlayer) {
        removePlayer(gameState.currentPlayer.id);
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      if (gameState.currentPlayer) {
        removePlayer(gameState.currentPlayer.id);
      }
    };
  }, [gameState.currentPlayer, removePlayer]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  useEffect(() => {
    if (!isConnected && gameState.isLoggedIn) {
      setGameState(prev => ({
        ...prev,
        error: '–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'
      }));
    } else if (isConnected && gameState.error) {
      setGameState(prev => ({
        ...prev,
        error: null
      }));
    }
  }, [isConnected, gameState.isLoggedIn, gameState.error]);

  // –†–µ–Ω–¥–µ—Ä —ç–∫—Ä–∞–Ω–∞ –≤—Ö–æ–¥–∞
  if (!gameState.isLoggedIn) {
    return (
      <div className="app">
        <LoginForm 
          onLogin={handleLogin} 
          isLoading={gameState.isLoading} 
        />
        {gameState.error && (
          <div className="error-message">
            ‚ö†Ô∏è {gameState.error}
          </div>
        )}
      </div>
    );
  }

  // –†–µ–Ω–¥–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  return (
    <div className="app">
      <header className="game-header">
        <h1 className="game-title">üéÆ 2D –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –ò–≥—Ä–∞</h1>
        <div className="header-controls">
          <button 
            onClick={handleLogout}
            className="logout-button"
          >
            üö™ –í—ã–π—Ç–∏
          </button>
        </div>
      </header>

      {gameState.error && (
        <div className="error-banner">
          ‚ö†Ô∏è {gameState.error}
        </div>
      )}

      <main className="game-main">
        <div className="game-area">
          <GameField 
            players={players}
            currentPlayerId={gameState.currentPlayer?.id || ''}
            fieldWidth={FIELD_WIDTH}
            fieldHeight={FIELD_HEIGHT}
            playerSize={PLAYER_SIZE}
          />
        </div>

        <aside className="game-sidebar">
          <PlayerList 
            players={players}
            currentPlayerId={gameState.currentPlayer?.id || ''}
            isConnected={isConnected}
          />
        </aside>
      </main>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö) */}
      <div className="mobile-controls">
        <p>üì± –ù–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω—é—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (WASD)</p>
      </div>
    </div>
  );
}

export default App;
