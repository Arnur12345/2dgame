const fs = require('fs');
const path = require('path');

console.log('üè† –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º...\n');

const files = [
  {
    path: 'src/App.tsx',
    replacements: [
      {
        from: /import { generateRandomColor, type Player } from '\.\/services\/firebase';/g,
        to: "import { generateRandomColor, type Player, demoService } from './services/localMultiplayer';"
      }
    ]
  },
  {
    path: 'src/hooks/useRealtimePlayers.ts',
    replacements: [
      {
        from: /import { type Player, playerService } from '\.\.\/services\/firebase';/g,
        to: "import { type Player, playerService } from '../services/localMultiplayer';"
      }
    ]
  },
  {
    path: 'src/hooks/usePlayerMovement.ts',
    replacements: [
      {
        from: /import { playerService } from '\.\.\/services\/firebase';/g,
        to: "import { playerService } from '../services/localMultiplayer';"
      }
    ]
  },
  {
    path: 'src/components/GameField.tsx',
    replacements: [
      {
        from: /import { type Player } from '\.\.\/services\/firebase';/g,
        to: "import { type Player } from '../services/localMultiplayer';"
      }
    ]
  },
  {
    path: 'src/components/PlayerList.tsx',
    replacements: [
      {
        from: /import { type Player } from '\.\.\/services\/firebase';/g,
        to: "import { type Player, demoService } from '../services/localMultiplayer';"
      }
    ]
  }
];

let totalReplacements = 0;
let processedFiles = 0;

files.forEach(fileConfig => {
  try {
    if (!fs.existsSync(fileConfig.path)) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fileConfig.path}`);
      return;
    }

    let content = fs.readFileSync(fileConfig.path, 'utf8');
    let fileReplacements = 0;

    fileConfig.replacements.forEach(replacement => {
      const matches = content.match(replacement.from);
      if (matches) {
        content = content.replace(replacement.from, replacement.to);
        fileReplacements += matches.length;
      }
    });

    if (fileReplacements > 0) {
      fs.writeFileSync(fileConfig.path, content);
      console.log(`‚úÖ ${fileConfig.path} - –∑–∞–º–µ–Ω–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: ${fileReplacements}`);
      totalReplacements += fileReplacements;
    } else {
      console.log(`‚ÑπÔ∏è  ${fileConfig.path} - –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
    }
    
    processedFiles++;
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${fileConfig.path}:`, error.message);
  }
});

console.log('\nüéØ –°–≤–æ–¥–∫–∞:');
console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedFiles}`);
console.log(`üîÑ –í—Å–µ–≥–æ –∑–∞–º–µ–Ω: ${totalReplacements}`);

if (totalReplacements > 0) {
  console.log('\nüè† –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:');
  console.log('‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firebase');
  console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
  console.log('‚úÖ –î–µ–º–æ-–±–æ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö');
  console.log('\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev');
  console.log('üîÑ –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞');
} else {
  console.log('\nü§î –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º.');
}

console.log('\nüìñ –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ Firebase: node switch-to-firebase.js'); 